package com.github.kelemen.brazier.ui;

import com.github.kelemen.brazier.Player;
import com.github.kelemen.brazier.cards.Card;
import com.github.kelemen.brazier.cards.CardDescr;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Consumer;
import javax.swing.JDialog;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import org.jtrim.utils.ExceptionHelper;

@SuppressWarnings("serial")
public class ChooseCardPanel extends javax.swing.JPanel {
    public ChooseCardPanel(
            Collection<? extends Card> cards,
            Consumer<? super Card> onSelect) {
        ExceptionHelper.checkNotNullArgument(onSelect, "onSelect");

        initComponents();

        setLayout(new ConstAspectRatioLayout());

        for (Card card: cards) {
            CardComponent cardComponent = new CardComponent(card);
            add(cardComponent);

            cardComponent.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseReleased(MouseEvent e) {
                    onSelect.accept(card);
                }
            });
        }
    }

    public static CardDescr selectCard(
            Component parent,
            boolean cancelable,
            Player player,
            Collection<? extends CardDescr> cardDescr) {
        List<Card> cards = new ArrayList<>();
        for (CardDescr card: cardDescr) {
            cards.add(new Card(player, card));
        }

        Card result = selectCard(parent, cancelable, cards);
        return result != null ? result.getCardDescr() : null;
    }

    public static Card selectCard(
            Component parent,
            boolean cancelable,
            Collection<? extends Card> cards) {
        JDialog dlg = new JDialog(
                SwingUtilities.getWindowAncestor(parent),
                Dialog.ModalityType.DOCUMENT_MODAL);

        dlg.setDefaultCloseOperation(cancelable
                ? WindowConstants.DISPOSE_ON_CLOSE
                : WindowConstants.DO_NOTHING_ON_CLOSE);

        AtomicReference<Card> resultRef = new AtomicReference<>();
        ChooseCardPanel panel = new ChooseCardPanel(cards, (card) -> {
            resultRef.set(card);
            dlg.dispose();
        });
        dlg.getContentPane().add(panel);

        dlg.setSize(parent.getWidth() / 2, parent.getHeight() / 2);
        dlg.setLocationRelativeTo(parent);
        dlg.setVisible(true);

        return resultRef.get();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 570, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
